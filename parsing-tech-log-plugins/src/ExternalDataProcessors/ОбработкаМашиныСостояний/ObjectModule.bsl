#Область ДополнительныеОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Обработка машины состояний");
	ПараметрыРегистрации.Вставить("Версия", "2019.06.17");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", ИнформацияПоИсторииИзменений());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
	                "Обработка машины состояний",
					"ОбработкаМашиныСостояний",
					"ОткрытиеФормы",
					Истина,
					);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ИнформацияПоИсторииИзменений()
	Возврат "
	| <div style='text-indent: 25px;'>Выполняется обработка машины состояний.</div>
	| <hr />
	| Подробную информацию смотрите по адресу интернет: <a target='_blank' href='https://github.com/Polyplastic/1c-parsing-tech-log'>https://github.com/Polyplastic/1c-parsing-tech-log</a>";
	
КонецФункции

#КонецОбласти


#Область ЗагрузкаДаных

Процедура ВыполнитьЗагрузкуДанных(Замер,ДополнительнаяОбработка=Неопределено) Экспорт
	
	ОбработатьДанныеМашинойСостояний(Замер);	
	
КонецПроцедуры

Функция ОбработатьДанныеМашинойСостояний(Замер) Экспорт

	// получим настройки загрузки
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	
	Если мНастройка=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не созданы настройки для операции произвольной загрузки по замеру ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	
	МашинаСостояний = мНастройка.МашинаСостояний;
	ИсточникЗамер	= мНастройка.ИсточникЗамер;
	ИсточникСвойство= мНастройка.ИсточникСвойство;
	
	МассивСтруктурСостояний = мНастройка.МассивСтруктурСостояний;
	МассивСтруктурFSM = мНастройка.МассивСтруктурFSM;	
	
	// TODO: Машину состояний загружать из файла
	//// Загрузим нейронную сеть
	//Модель = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(МашинаСостояний,"Модель");
	//НН = Неопределено;
	//Если ЗагрузитьПроектXML(Модель,НН)=Ложь Тогда
	//	ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не загруженна модель нейронной сети ("+НейроннаяСеть+")для замера ("+Замер+")");
	//	Возврат 0;
	//КонецЕсли;
	
	//инициализация фильтров
	РеквизитыЗамера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замер, "ФильтрТипСобытия,ФильтрСвойстваСобытия,ФильтрСвойстваСобытияКроме,ФильтрДлительность,НачалоПериода,КонецПериода,ТипЗамера,ДополнительнаяОбработка");
	НачалоПериода 	= РеквизитыЗамера.НачалоПериода;
	КонецПериода 	= РеквизитыЗамера.КонецПериода;
	РеквизитыЗамера.Вставить("ФильтрТипСобытия", РеквизитыЗамера.ФильтрТипСобытия.Получить());
	ЕстьФильтрТипСобытия = РеквизитыЗамера.ФильтрТипСобытия<>Неопределено И РеквизитыЗамера.ФильтрТипСобытия.Количество()>0;
	ЕстьФильтрСвойстваСобытия = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрСвойстваСобытия);
	ЕстьФильтрДлительность = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрДлительность); 
	
	НавигационнаяСсылка = "/Замер/"+Замер+" ("+Замер.UUID()+")";
	ФайлЗамера = Справочники.ФайлыЗамера.ПолучитьФайлПоПолномуИмени(Замер, НавигационнаяСсылка);
	
	//еще раз проверим прочитан полностью
	СостояниеЧтения = РегистрыСведений.СостояниеЧтения.ПолучитьСостояние(ФайлЗамера);
	Если СостояниеЧтения.ЧтениеЗавершено Тогда
		Возврат 0;
	КонецЕсли;		
	
	РазмерФайла = 0;
	
	ДатаНачалаЧтения = ТекущаяДата();
	
	//по факту - количество прочитанных данных
	ПрочитаноСтрок 			= СостояниеЧтения.ПрочитаноСтрок;
	ДатаПрочитанныхДанных 	= СостояниеЧтения.ДатаПрочитанныхДанных;
	
	// читаем в границе
	Если ДатаПрочитанныхДанных<НачалоПериода Тогда
		ДатаПрочитанныхДанных = НачалоПериода;
	КонецЕсли;
	
	//часть реквизитов будет одинакова для всего файла
	СтруктураЗаписи 			= ОбновлениеДанных.ПолучитьСтруктуруЗаписиСправочник();
	СтруктураЗаписи.Владелец 	= Замер;
	СтруктураЗаписи.Файл 		= ФайлЗамера;
	
	
	Если НЕ (ЗначениеЗаполнено(КонецПериода) И КонецПериода<ТекущаяДата()) Тогда
		КонецПериода = ТекущаяДата();
		КонецПериода = ОкруглитьДоМинуты(КонецПериода);
	КонецЕсли;
	
	ЕстьДанныеДляОбработки = Истина;	
	
	Запрос = новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 300
	|	Т.ЗначениеЧисло КАК ЗначениеЧисло,
	|	Т.Значение КАК Значение,
	|	Т.Значение КАК Состояние,
	|	Т.Свойство КАК Свойство,
	|	Т.Свойство.Наименование КАК СвойствоНаименование,
	|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
	|ГДЕ
	|	Т.Ссылка.ДатаСобытия > &ДатаНачала
	|	И Т.Ссылка.ДатаСобытия < &ДатаОкончания
	|	И Т.Ссылка.Владелец = &ИсточникЗамер
	|	И Т.Свойство = &ИсточникСвойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("ИсточникЗамер",ИсточникЗамер);	
	Запрос.УстановитьПараметр("ИсточникСвойство",ИсточникСвойство);
	
	СвойствоСостояниеМашиныСостояний = СправочникиСерверПовтИсп.ПолучитьСвойство("FSM state");
	СвойствоСловоПереходаМашиныСостояний = СправочникиСерверПовтИсп.ПолучитьСвойство("FSM command");
	
	// формируем соответствие
	СоответствиеFSM = Новый Соответствие();
	Для каждого стр из МассивСтруктурFSM Цикл
		слово_ключ = стр.ИсходноеСостояние+"->"+стр.НовоеСостояние;
		
		МассивНастроек = СоответствиеFSM.Получить(слово_ключ);
		
		Если МассивНастроек=Неопределено Тогда
			МассивНастроек = новый Массив;
			СтруктураПерехода = новый Структура;
			СтруктураПерехода.Вставить("ДополнительнаяОбработка",стр.ДополнительнаяОбработка);
			СтруктураПерехода.Вставить("УчетнаяЗапись",стр.УчетнаяЗапись);
			СтруктураПерехода.Вставить("ШаблонСообщения",стр.ШаблонСообщения);
			МассивНастроек.Добавить(СтруктураПерехода);
			СоответствиеFSM.Вставить(слово_ключ,МассивНастроек);
		Иначе
			СтруктураПерехода = новый Структура;
			СтруктураПерехода.Вставить("ДополнительнаяОбработка",стр.ДополнительнаяОбработка);
			СтруктураПерехода.Вставить("УчетнаяЗапись",стр.УчетнаяЗапись);
			СтруктураПерехода.Вставить("ШаблонСообщения",стр.ШаблонСообщения);
			МассивНастроек.Добавить(СтруктураПерехода);
		КонецЕсли;
		
	КонецЦикла;
	
	// для бесшовного определения сосояний
	СостояниеFSM = РегистрыСведений.СостояниеОбработкиFSM.ПолучитьСостояние(ФайлЗамера);
	
	ПредыдущееСостояние = СостояниеFSM.ПредыдущееСостояние;
	ТекущееСостояние = СостояниеFSM.ТекущееСостояние;
	
	ЗащитаОтЗацикливанияПоПериоду = Дата(1,1,1);
	
	Пока ЕстьДанныеДляОбработки=Истина Цикл
		
		Если ДатаПрочитанныхДанных=КонецПериода Тогда
			Прервать;
		КонецЕсли;
		
		// если у нас остается в таблице одна запись, которая будет игнорироваться, чтобы она не прыгала
		// ограничим
		Если ДатаПрочитанныхДанных=ЗащитаОтЗацикливанияПоПериоду И ЗащитаОтЗацикливанияПоПериоду<>Дата(1,1,1) Тогда
			Прервать;
		Иначе
			ЗащитаОтЗацикливанияПоПериоду = ДатаПрочитанныхДанных;
		КонецЕсли;
		
		ПрочитаноСтрок = ПрочитаноСтрок+1;
		
		Запрос.УстановитьПараметр("ДатаНачала",ДатаПрочитанныхДанных);
		Запрос.УстановитьПараметр("ДатаОкончания",КонецПериода);
		
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		ЕстьДанныеДляОбработки = (ТаблицаДанных.Количество()>0);
		
		СоответствиеДат = новый Соответствие;
		
		Для каждого стр из ТаблицаДанных Цикл
			
			ПредыдущееСостояние = ТекущееСостояние;
			ТекущееСостояние = стр.Состояние;
			слово_ключ 			= ПредыдущееСостояние+"->"+ТекущееСостояние;
			слово_ключ_звезда1	= "*->"+ТекущееСостояние;
			слово_ключ_звезда2	= ПредыдущееСостояние+"->*";
			слово_ключ_звезда3	= "*->*";

			
			// !!!! Внимание !!!!
			// смотрим только изменение состояний
			Если НЕ ТекущееСостояние=ПредыдущееСостояние Тогда
				
				// поиск по команде четкой
				МассивНастроек = СоответствиеFSM.Получить(слово_ключ);
				
				// иначе с *->
				Если МассивНастроек=Неопределено Тогда
					МассивНастроек = СоответствиеFSM.Получить(слово_ключ_звезда1);
				Конецесли;
				
				// иначе с ->*
				Если МассивНастроек=Неопределено Тогда
					МассивНастроек = СоответствиеFSM.Получить(слово_ключ_звезда2);
				Конецесли;
				
				// иначе с *->*
				Если МассивНастроек=Неопределено Тогда
					МассивНастроек = СоответствиеFSM.Получить(слово_ключ_звезда3);
				Конецесли;  			
				
				// если нет никаких действий, тогда продолжаем
				Если НЕ МассивНастроек=Неопределено Тогда
					// обработка
					Для каждого Настройка из МассивНастроек Цикл
						ВыполнитьПроцедуруПерехода(Замер,Настройка,стр.ДатаСобытия,ТекущееСостояние,ПредыдущееСостояние);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			
			ДатаПрочитанныхДанных 			= стр.ДатаСобытия;
			СтруктураЗаписи.ДатаСобытия 	= стр.ДатаСобытия;
			СтруктураЗаписи.КлючевыеСвойства.Очистить();
			
			СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоСостояниеМашиныСостояний,стр.Состояние);
			СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоСловоПереходаМашиныСостояний, слово_ключ);
			Справочники.СобытияЗамера.ЗаписатьСобытиеЧисло(СтруктураЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	// обновляем ифнормацию по состоянию
	РегистрыСведений.СостояниеОбработкиFSM.УстановитьСостояние(
		ФайлЗамера,
		ПрочитаноСтрок,
		ДатаПрочитанныхДанных,
		ТекущееСостояние,
		ПредыдущееСостояние);
	
	
	// Обновление инфорации о количестве прочитанных строк
	РегистрыСведений.СостояниеЧтения.УстановитьСостояние(
		ФайлЗамера, 
		ДатаНачалаЧтения,
		ПрочитаноСтрок, 
		ДатаНачалаЧтения,
		РазмерФайла,
		ДатаПрочитанныхДанных);

	Возврат 0;
	
	
КонецФункции

Функция ОкруглитьДоМинуты(ПараметрДата,НаправлениеВверх=Истина)
	
	Секунды = Секунда(ПараметрДата);
	Если НаправлениеВверх=Истина Тогда
		ВремяОкругления = ПараметрДата-Секунды+60;
	Иначе
		ВремяОкругления = ПараметрДата-Секунды;
	КонецЕсли;
	
	Возврат ВремяОкругления;
	
КонецФункции

Процедура ВыполнитьПроцедуруПерехода(Замер, Настройка, ДатаСобытия, ТекущееСостояние, ПредыдущееСостояние)
	
	Оборудование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Замер,"Оборудование");
	
	// выполняем обработку
	ДополнительнаяОбработка = настройка.ДополнительнаяОбработка;
	ХранилищеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительнаяОбработка,"ХранилищеОбработки");
	ДвоичныеДанные = ХранилищеОбработки.Получить();
	АдресОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ЗащитаОтОпасныхДействий = новый ОписаниеЗащитыОтОпасныхДействий;
	ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	ИмяВнешнейОбработки = ВнешниеОбработки.Подключить(АдресОбработки,,Ложь,ЗащитаОтОпасныхДействий);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
	
	НаборПриветсвийСтрокой = "Эй, народ! У нас проблемы!
	|Обратите внимание!
	|Ситуация стала критической!
	|Ахтунг! Аларма!
	|Что-то пошло не так!
	|Хозяин! Тут проблемы!";
	
	//TODO: обработать шаблон сообщений
	// Настройка.ШаблонСообщения
	МассивНаборов = СтрРазделить(НаборПриветсвийСтрокой,Символы.ПС,Ложь);
	ГС = новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ВариантСообщения = ГС.СлучайноеЧисло(0,МассивНаборов.ВГраница());
	ОбращениеСтрокой = МассивНаборов[ВариантСообщения];
	УчетнаяЗапись = Настройка.УчетнаяЗапись;

	
	// выполняем процедуру
	ВнешняяОбработка.ОтправитьСообщение(УчетнаяЗапись,,""+ДатаСобытия+" "+ОбращениеСтрокой+" "+Символы.ПС+" Произошло изменение состояния системы ("+?(ЗначениеЗаполнено(Оборудование),Оборудование,"не указано")+") из состояния '"+ПредыдущееСостояние+"' в состояние '"+ТекущееСостояние+"'!");		
	
КонецПроцедуры

#КонецОбласти
